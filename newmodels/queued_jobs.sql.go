// Code generated by sqlc. DO NOT EDIT.
// source: queued_jobs.sql

package newmodels

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/kevinburke/go-types"
)

const acquireJob = `-- name: AcquireJob :one
WITH queued_job as (
    SELECT id AS inner_id
    FROM queued_jobs
    WHERE status='queued'
    AND queued_jobs.name = $1
    AND run_after <= now()
    ORDER BY created_at ASC
    LIMIT 1
)
SELECT id, name, attempts, run_after, expires_at, created_at, updated_at, status, data
FROM queued_jobs
WHERE pg_try_advisory_lock(queued_job.id)
`

func (q *Queries) AcquireJob(ctx context.Context, name string) (QueuedJob, error) {
	row := q.db.QueryRowContext(ctx, acquireJob, name)
	var i QueuedJob
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Attempts,
		&i.RunAfter,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Data,
	)
	return i, err
}

const deleteQueuedJob = `-- name: DeleteQueuedJob :exec
DELETE FROM queued_jobs WHERE id = $1
`

func (q *Queries) DeleteQueuedJob(ctx context.Context, id types.PrefixUUID) error {
	_, err := q.db.ExecContext(ctx, deleteQueuedJob, id)
	return err
}

const enqueueJob = `-- name: EnqueueJob :one
INSERT INTO queued_jobs (id,
	name,
	attempts,
	run_after,
	expires_at,
	status,
	data)
SELECT $1, jobs.name, attempts, $3, $4, 'queued', $5
FROM jobs
WHERE jobs.name = $2
AND NOT EXISTS (
	SELECT id FROM archived_jobs WHERE id = $1
)
RETURNING id, name, attempts, run_after, expires_at, created_at, updated_at, status, data
`

type EnqueueJobParams struct {
	ID        types.PrefixUUID `json:"id"`
	Name      string           `json:"name"`
	RunAfter  time.Time        `json:"run_after"`
	ExpiresAt sql.NullTime     `json:"expires_at"`
	Data      json.RawMessage  `json:"data"`
}

func (q *Queries) EnqueueJob(ctx context.Context, arg EnqueueJobParams) (QueuedJob, error) {
	row := q.db.QueryRowContext(ctx, enqueueJob,
		arg.ID,
		arg.Name,
		arg.RunAfter,
		arg.ExpiresAt,
		arg.Data,
	)
	var i QueuedJob
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Attempts,
		&i.RunAfter,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Data,
	)
	return i, err
}

const getQueuedJob = `-- name: GetQueuedJob :one
SELECT id, name, attempts, run_after, expires_at, created_at, updated_at, status, data
FROM queued_jobs
WHERE id = $1
`

func (q *Queries) GetQueuedJob(ctx context.Context, id types.PrefixUUID) (QueuedJob, error) {
	row := q.db.QueryRowContext(ctx, getQueuedJob, id)
	var i QueuedJob
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Attempts,
		&i.RunAfter,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Data,
	)
	return i, err
}
